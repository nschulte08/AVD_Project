%{
===========================================================================
This function takes a value of drag in [Newtons], altitude in [meters], and 
Mach number, and gives the adjusted TSFC for a thrust that equals the drag[N] 
and if afterburners are needed ('of' is [off]).
 
Because the TSFC is a function of the throttle setting as well as the point
in the mission profile, this function uses throttle setting data from
Mattingly PERF software to give TSFC values adjusted for throttle setting needed to match the drag. 
 
TSFC_Throttledown is output in lbm/(hr-lbf)

Examples: 
--------------------------------------------------------------------------- 
[TSFC,AB] = throttledown(7000,18000,0.7)
 
TSFC =
    0.8272
 
AB =
  cell
    'Of'
--------------------------------------------------------------------------- 
[TSFC,AB] = throttledown(12000,18000,0.7)
 
TSFC =
    1.3786

AB =
  cell
     'On'
---------------------------------------------------------------------------
NOTE:

Valid range of Mach number inputs:
0.5 <= M <= 0.8  
&&
1.2 <= M <= 2.8

Valid range of alititude inputs:
13000 <= h <= 18000 [meters]

---------------------------------------------------------------------------
Written by: Rustin Faris
Written from:
Last Modified: 04/23/2018
===========================================================================
%}
%%
function [TSFC_Throttledown, AB, ne] = throttledown(D, Alt, Mach, ne)
%--------------------------------------------------------------------------
if Mach <= 1; %-------------Subsonic Matrix-----------%
    Thrust = zeros(4,6,41); % zeros(Mach,Alt,Throttle)
    TSFC = zeros(4,6,41);
    Afterburners = cell(4,6,41);
    Machaxis = (0.5:0.1:0.8);
    Altaxis = (13000:1000:18000);
    Throttleaxis = (100:-2:20);
        
else %-------------Supersonic Matrix------------%
    Thrust = zeros(5,4,41); % zeros(Mach,Alt,Throttle)
    TSFC = zeros(5,4,41);%
    Afterburners = cell(5,4,41);
    Machaxis = (1.2:0.4:2.8);
    Altaxis = (12000:2000:18000);
    Throttleaxis = (100:-2:20);
end
%--------------------------------------------------------------------------
[ThrustMax,~] = Propulsion(Mach,Alt);
Throttle = (D/ThrustMax)*100;
if Throttle < 20
    D = D*ne/(ne-1);
    Throttle = (D/ThrustMax)*100;
    ne = ne-1;
elseif Throttle > 100
    D = D*ne/(ne+1);
    Throttle = (D/ThrustMax)*100;
    ne = ne+1;
end
%--------------------------------------------------------------------------
[Altaxisgrid,Machaxisgrid,Throttleaxisgrid] = meshgrid(Altaxis,Machaxis,Throttleaxis); 
%--------------------------------------------------------------------------
% move to folder with propulsion data txt files:
current_folder = pwd; % save for moving back
projdir = sprintf('%s/%s/', pwd, 'propulsion data');
cd(projdir)
%--------------------------------------------------------------------------
    for i=1:length(Machaxis) % Mach numbers
        if Mach <= 1
            Machstr = strcat('0',num2str(Machaxis(i)*10));
        else
            Machstr = strcat(num2str(Machaxis(i)*10));
        end
        %------------------------------------------------------------------
        for j=1:length(Altaxis) % Altitudes
            altstr = num2str(Altaxis(j));
            filename = strcat('Throttle_',Machstr,'_',altstr,'.txt');
            raw_data = importfile(filename);
            Thrust(i,j,:) = raw_data(:,1);
            TSFC(i,j,:) = raw_data(:,2);
            Afterburners(i,j,:) = importfileAB(filename);
        end
    end
cd(current_folder)
%--------------------------------------------------------------------------
TSFC_Throttledown = interp3(Altaxisgrid,Machaxisgrid,Throttleaxisgrid,TSFC,Alt,Mach,Throttle)*0.035306; % lbm/(hr-lbf)
%--------------------------------------------------------------------------
if Mach <= 1
    indexAlt = round((Alt-13000)/1000)+1;
    indexMach= round((Mach-0.5)*10)+1;
else
	indexAlt = round((Alt-12000)/2000)+1;
    indexMach= round((Mach-1.2)*2.5)+1;
end
indexTh = floor((100-Throttle)/2);
%--------------------------------------------------------------------------
    try
         AB = Afterburners(indexMach,indexAlt,indexTh);
        catch
            warning('Drag not within thrust range')
            AB = '?';
    end
%--------------------------------------------------------------------------
end
%%
function ThrottleSub1 = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   THROTTLESUB1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   THROTTLESUB1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   ThrottleSub1 = importfile('Throttle_Sub.txt', 5, 46);
%
%    See also TEXTSCAN.
 
% Auto-generated by MATLAB on 2018/04/18 18:42:25
%--------------------------------------------------------------------------
% Initialize variables.
if nargin<=2
    startRow = 5;
    endRow = inf;
end
%--------------------------------------------------------------------------
% Format for each line of text:
%   column1: double (%f)
%   column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%7f%7f%[^\n\r]';
%--------------------------------------------------------------------------
% Open the text file.
fileID = fopen(filename,'r');
%--------------------------------------------------------------------------
% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'EmptyValue' ,NaN,'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'EmptyValue' ,NaN,'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end
%--------------------------------------------------------------------------
% Close the text file.
fclose(fileID);
%--------------------------------------------------------------------------
% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.
%-------------------------------------------------------------------------- 
% Create output variable
ThrottleSub1 = [dataArray{1:end-1}];
end
%%
function Afterburner = importfileAB(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   THROTTLE1 = IMPORTFILE1(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   THROTTLE1 = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Throttle1 = importfile1('Throttle_1.2_18000.txt', 5, 45);
%
%    See also TEXTSCAN.
 
% Auto-generated by MATLAB on 2018/04/23 10:18:30
%--------------------------------------------------------------------------
% Initialize variables.
if nargin<=2
    startRow = 5;
    endRow = 45;
end
%-------------------------------------------------------------------------- 
% Format for each line of text:
%   column11: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*66s%3s%[^\n\r]';
%--------------------------------------------------------------------------
% Open the text file.
fileID = fopen(filename,'r');
%-------------------------------------------------------------------------- 
% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end
%--------------------------------------------------------------------------
% Remove white space around all cell columns.
dataArray{1} = strtrim(dataArray{1});
%-------------------------------------------------------------------------- 
% Close the text file.
fclose(fileID);
%-------------------------------------------------------------------------- 
% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.
%--------------------------------------------------------------------------
% Create output variable
Afterburner = [dataArray{1:end-1}];
end
